/* eslint-disable */
import * as THREE from "three";
import { useRef, useState, Suspense } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
// import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
import { useGLTF, Environment } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { OrbitControls, Stage } from "@react-three/drei";

type GLTFResult = GLTF & {
  nodes: {
    diploma1: THREE.Mesh;
  };
  materials: {};
};

function Diploma(props: JSX.IntrinsicElements["group"]) {
  // This reference will give us direct access to the THREE.Mesh object
  const meshRef = useRef<THREE.Mesh>(null!);
  // Hold state for hovered and clicked events
  const [hovered, hover] = useState(false);
  const [clicked, click] = useState(false);
  // Rotate mesh every frame, this is outside of React without overhead
  useFrame((state, delta) => (meshRef.current.rotation.y += 0.01));
  // const gltf = useLoader(GLTFLoader, "/Diploma.gltf");

  const { nodes, materials } = useGLTF("/Diplomav2.glb") as GLTFResult;

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={meshRef}
        castShadow
        receiveShadow
        geometry={nodes.diploma1.geometry}
        material={nodes.diploma1.material}
        scale={0.2}
      />
    </group>
  );
}

export default function Hero3d() {
  const ref = useRef<any>();

  return (
    <Canvas shadows dpr={[1, 2]} camera={{ fov: 50 }}>
      <Suspense fallback={null}>
        {/* <ambientLight />
        <directionalLight color="white" position={[0, 0, 5]} />
        <pointLight position={[10, 10, 10]} /> */}
        {/* <Environment preset="sunset" background /> */}
        <Stage preset="soft" intensity={1} environment="city">
          false
          <Diploma position={[0, 0, 0]} />
          false
        </Stage>
      </Suspense>
      <OrbitControls ref={ref} autoRotate />
    </Canvas>
  );
}
useGLTF.preload("/Diploma.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import * as THREE from "three";
// import React, { useRef, useMemo, useContext, createContext } from "react";
// import { useGLTF, Merged } from "@react-three/drei";
// import { GLTF } from "three-stdlib";

// type GLTFResult = GLTF & {
//   nodes: {
//     diploma1: THREE.Mesh;
//   };
//   materials: {};
// };

// const context = createContext<any | undefined>(undefined);
// export function Instances({
//   children,
//   ...props
// }: {
//   children: any;
//   props: any;
// }) {
//   const { nodes } = useGLTF("/Diploma.glb") as GLTFResult;
//   const instances = useMemo(
//     () => ({
//       Diploma: nodes.diploma1,
//     }),
//     [nodes]
//   );
//   return (
//     <Merged meshes={instances} {...props}>
//       {(instances: any) => (
//         <context.Provider value={instances} children={children} />
//       )}
//     </Merged>
//   );
// }

// export default function Hero3d(props: JSX.IntrinsicElements["group"]) {
//   const instances = useContext(context);
//   return (
//     <group {...props} dispose={null}>
//       <group>
//         <group scale={0.01}>
//           <instances.Diploma />
//         </group>
//       </group>
//     </group>
//   );
// }

// useGLTF.preload("/Diploma.glb");
